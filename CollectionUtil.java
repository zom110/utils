package com.wodan.platform.foundation.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.springframework.util.Assert;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

/**
 * CollectionUtil
 * 
 * @author longlin(longlin@cyou-inc.com)
 * @date 2013-10-15
 * @since V1.0
 */
public class CollectionUtil {
	public static final String DEFAULT_DELIMITER = ",";

	/**
	 * 列表是否为空
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isEmpty(Collection<?> list) {
		return list == null || list.isEmpty();
	}

	/**
	 * 列表是否不为空
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNotEmpty(Collection<?> list) {
		return !isEmpty(list);
	}

	/**
	 * 数组转List对象
	 * 
	 * @param array
	 * @param <T>
	 * @return
	 */
	@SafeVarargs
	public static <T> List<T> asList(T... array) {
		if (array == null) {
			return null;
		}

		List<T> list = new ArrayList<T>();
		for (T t : array) {
			if (t != null) {
				list.add(t);
			}
		}
		return list;
	}

	public static <T extends Object> List<String> trim(List<T> list) {
		if (list == null) {
			return null;
		}
		List<String> newList = new ArrayList<String>();
		for (Object o : list) {
			if (o != null) {
				newList.add(StringUtil.trim(String.valueOf(o)));
			}
		}
		return newList;
	}

	/**
	 * 
	 * 删除列表的不同值
	 * 
	 * @Description:
	 * @param srcSet
	 * @param compareSet
	 */
	public static <T> void removeDifrentValue(Set<T> srcSet, Set<T> compareSet) {

		Set<T> removeSet = new HashSet<T>();

		for (T value : srcSet) {
			if (!compareSet.contains(value)) {
				removeSet.add(value);
			}
		}

		for (T value : removeSet) {
			srcSet.remove(value);
		}
	}

	/**
	 * 求交集
	 * <p>
	 * 算法如下：<br/>
	 * 1. 取出n个集合中，长度最小的集合 2. 根据长度最小的集合进行遍历，找到所有集合的交集
	 * </p>
	 * 
	 * @Description:
	 * @param sets
	 * @return
	 */
	public static <T> Set<T> intersectionSet(List<Set<T>> sets) {
		Assert.notNull(sets);
		Assert.isTrue(sets.size() >= 2);

		// 将集合拆分成第一个元素和其他元素
		Set<T> shortestSet = sets.get(0);
		List<Set<T>> otherSets = sets.subList(1, sets.size());

		// 找到长度最小的集合
		for (Set<T> another : otherSets) {
			if (another.size() < shortestSet.size()) {
				shortestSet = another;
			}
		}

		// 找交集
		Set<T> resultSet = Sets.newHashSet();
		for (T obj : shortestSet) {
			if (isElementContainsInAllSet(obj, sets)) {
				resultSet.add(obj);
			}
		}

		return resultSet;
	}

	/**
	 * 判断元素是否在所有 集合中存在
	 * 
	 * @Description:
	 * @param element
	 * @param sets
	 * @return
	 */
	private static <T> boolean isElementContainsInAllSet(T element, List<Set<T>> sets) {
		for (Set<T> set : sets) {
			if (!set.contains(element)) {
				return false;
			}
		}

		return true;
	}

	/**
	 * 求并集
	 * 
	 * @Description:
	 * @param tempSetList
	 * @return
	 */
	public static <T> Set<T> unionSet(Collection<Set<T>> tempSetList) {
		Assert.notNull(tempSetList);

		Set<T> resultSet = Sets.newHashSet();

		for (Set<T> temp : tempSetList) {
			resultSet.addAll(temp);
		}

		return resultSet;
	}

	public static void main(String[] args) {
		List<Set<Long>> setList = Lists.newArrayList();
		String str = "[2, 548, 1096, 5, 545, 7, 558, 1092, 1093, 10, 1094, 16, 19, 563, 21, 1112, 23, 22, 1110, 28, 569, 31, 35, 513, 514, 515, 525, 43, 526, 51, 1150, 535, 1149, 1148, 54, 531, 53, 1142, 540, 1140, 536, 539, 60, 1136, 611, 1033, 614, 1038, 622, 621, 84, 626, 625, 624, 83, 628, 89, 1044, 576, 577, 1067, 578, 101, 579, 1070, 581, 109, 105, 593, 1560, 599, 112, 598, 1084, 604, 122, 1078, 607, 120, 139, 142, 129, 128, 676, 672, 134, 703, 1237, 157, 699, 144, 1245, 693, 1247, 1241, 1254, 655, 175, 1251, 1250, 1248, 172, 1262, 167, 1270, 186, 1271, 187, 1268, 1278, 176, 662, 182, 1272, 1273, 1153, 204, 1155, 1157, 1156, 203, 1709, 1163, 736, 195, 194, 762, 221, 1717, 223, 216, 764, 755, 213, 1178, 214, 1180, 208, 759, 1721, 712, 1184, 714, 236, 1190, 716, 719, 233, 232, 1193, 709, 227, 226, 1203, 252, 1201, 250, 1204, 734, 248, 735, 1211, 247, 1208, 244, 727, 820, 272, 822, 1371, 277, 819, 280, 1364, 1363, 825, 1362, 824, 1361, 1356, 257, 800, 1355, 260, 1350, 1351, 1348, 265, 1346, 305, 790, 307, 789, 311, 797, 314, 774, 775, 290, 772, 291, 770, 768, 769, 782, 300, 776, 1306, 342, 883, 1305, 882, 885, 884, 886, 336, 889, 891, 1303, 893, 894, 1300, 1837, 323, 1295, 872, 1282, 335, 874, 1824, 1286, 1826, 1284, 1285, 1827, 1823, 372, 855, 1340, 368, 370, 856, 376, 1332, 861, 1809, 1808, 860, 834, 1804, 1327, 355, 1798, 1799, 843, 1313, 1796, 366, 1797, 1315, 367, 1795, 844, 363, 956, 958, 1492, 952, 953, 944, 945, 947, 1479, 393, 942, 390, 440, 923, 435, 437, 910, 429, 416, 899, 897, 1427, 474, 1434, 1008, 468, 1010, 1013, 460, 458, 1413, 1412, 1006, 994, 997, 1422, 450, 508, 990, 507, 500, 976, 503, 496, 498, 980, 492, 495, 494, 489, 488, 490, 484, 486, 481, 966], [1354, 1360], [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 17, 16, 19, 18, 21, 20, 23, 22, 24, 26, 28, 30, 36, 43, 40, 41, 47, 44, 51, 49, 48, 55, 54, 53, 52, 59, 63, 62, 61, 60, 68, 65, 67, 77, 74, 75, 85, 84, 87, 83, 92, 89, 102, 103, 100, 101, 99, 96, 110, 111, 109, 106, 107, 104, 105, 119, 118, 115, 114, 113, 112, 126, 124, 123, 122, 121, 120, 137, 136, 139, 141, 140, 143, 142, 129, 128, 131, 130, 133, 132, 135, 134, 152, 153, 154, 156, 157, 158, 144, 146, 147, 148, 150, 151, 171, 175, 174, 173, 172, 163, 162, 161, 167, 166, 186, 187, 184, 185, 190, 188, 189, 178, 179, 176, 182, 180, 181, 204, 206, 201, 200, 203, 202, 198, 193, 195, 194, 220, 221, 223, 216, 217, 219, 212, 213, 214, 215, 208, 209, 210, 211, 239, 238, 237, 236, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 254, 255, 252, 253, 250, 248, 249, 246, 247, 244, 245, 242, 240, 241, 275, 273, 272, 279, 278, 277, 276, 283, 282, 281, 280, 287, 285, 284, 258, 259, 256, 257, 262, 263, 260, 261, 266, 267, 264, 265, 270, 271, 268, 269, 305, 307, 306, 309, 308, 311, 310, 312, 315, 314, 316, 319, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 343, 342, 341, 340, 339, 336, 351, 350, 349, 347, 346, 345, 344, 326, 327, 324, 325, 322, 323, 320, 321, 334, 335, 332, 333, 330, 328, 329, 371, 356, 357, 358, 359, 353, 354, 355, 360, 362, 363, 410, 415, 406, 407, 399, 397, 443, 444, 432, 433, 425, 424, 427, 426, 429, 428, 431, 430, 417, 423, 422, 478, 479, 476, 477, 474, 475, 472, 470, 471, 468, 464, 465, 463, 510, 507, 502, 497, 499, 492, 495, 494, 484, 481, 480, 483, 482, 548, 546, 544, 545, 558, 559, 556, 555, 552, 553, 567, 566, 565, 564, 563, 561, 560, 574, 573, 572, 571, 570, 569, 568, 517, 518, 512, 513, 514, 515, 525, 520, 521, 522, 533, 528, 531, 541, 540, 542, 539, 610, 611, 608, 609, 614, 613, 618, 619, 616, 617, 622, 623, 621, 626, 625, 624, 631, 630, 629, 628, 635, 634, 632, 639, 638, 637, 636, 576, 577, 578, 579, 580, 581, 590, 593, 592, 594, 597, 599, 598, 601, 600, 603, 602, 605, 604, 607, 606, 687, 686, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 702, 703, 699, 695, 693, 690, 688, 689, 652, 655, 654, 649, 648, 651, 650, 645, 647, 646, 641, 640, 643, 642, 668, 669, 670, 666, 667, 660, 661, 662, 663, 656, 658, 659, 747, 746, 745, 744, 750, 749, 748, 738, 737, 736, 743, 742, 741, 740, 762, 763, 760, 761, 766, 767, 764, 765, 755, 752, 753, 758, 759, 756, 713, 712, 715, 714, 717, 716, 719, 718, 705, 707, 706, 709, 708, 711, 710, 728, 729, 730, 731, 732, 733, 734, 735, 720, 721, 722, 725, 726, 727, 821, 820, 822, 817, 816, 819, 818, 829, 828, 830, 825, 824, 827, 826, 804, 805, 806, 807, 800, 801, 802, 803, 812, 814, 815, 808, 809, 810, 811, 791, 790, 789, 788, 787, 786, 785, 784, 799, 798, 797, 796, 794, 793, 792, 774, 775, 772, 773, 770, 771, 768, 769, 782, 783, 780, 781, 776, 777, 881, 880, 883, 882, 885, 884, 887, 886, 889, 888, 891, 890, 893, 892, 895, 894, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 851, 850, 849, 848, 855, 854, 853, 858, 856, 863, 862, 861, 860, 834, 835, 832, 833, 838, 836, 837, 842, 843, 841, 846, 844, 845, 956, 957, 958, 959, 952, 953, 948, 949, 950, 944, 945, 947, 941, 940, 943, 942, 936, 938, 932, 935, 934, 928, 930, 926, 927, 924, 925, 922, 923, 921, 918, 919, 916, 917, 914, 915, 911, 910, 909, 908, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 1016, 1017, 1018, 1019, 1023, 1008, 1010, 1012, 1013, 1014, 1015, 1000, 1002, 1005, 1007, 1006, 995, 994, 997, 996, 998, 986, 987, 984, 990, 991, 988, 989, 978, 979, 976, 977, 982, 980, 981, 971, 970, 969, 968, 975, 973, 972, 963, 962, 961, 960, 967, 966, 964, 1100, 1101, 1103, 1096, 1097, 1098, 1099, 1092, 1093, 1094, 1095, 1088, 1089, 1090, 1091, 1113, 1112, 1115, 1114, 1109, 1108, 1111, 1110, 1105, 1106, 1135, 1132, 1133, 1130, 1131, 1128, 1129, 1126, 1127, 1124, 1125, 1122, 1123, 1120, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1032, 1033, 1035, 1036, 1038, 1039, 1024, 1025, 1026, 1027, 1030, 1031, 1049, 1048, 1051, 1053, 1052, 1041, 1040, 1043, 1042, 1045, 1044, 1066, 1067, 1064, 1070, 1071, 1068, 1069, 1058, 1063, 1083, 1087, 1086, 1085, 1084, 1073, 1079, 1078, 1221, 1223, 1222, 1217, 1216, 1219, 1218, 1229, 1230, 1225, 1224, 1227, 1236, 1237, 1238, 1239, 1232, 1233, 1234, 1235, 1244, 1245, 1246, 1247, 1240, 1241, 1242, 1243, 1255, 1254, 1253, 1252, 1251, 1250, 1249, 1248, 1263, 1262, 1261, 1260, 1259, 1258, 1257, 1256, 1270, 1271, 1268, 1266, 1267, 1264, 1265, 1278, 1279, 1276, 1277, 1274, 1272, 1273, 1153, 1152, 1155, 1154, 1157, 1156, 1159, 1158, 1161, 1163, 1162, 1165, 1164, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1187, 1186, 1185, 1184, 1191, 1190, 1188, 1195, 1194, 1193, 1199, 1198, 1197, 1196, 1202, 1203, 1200, 1201, 1206, 1207, 1204, 1205, 1211, 1208, 1215, 1212, 1213, 1371, 1370, 1369, 1368, 1367, 1366, 1365, 1364, 1363, 1362, 1361, 1360, 1358, 1359, 1356, 1357, 1354, 1355, 1352, 1353, 1350, 1351, 1348, 1349, 1346, 1347, 1344, 1345, 1387, 1307, 1306, 1305, 1304, 1311, 1310, 1309, 1308, 1299, 1298, 1297, 1296, 1303, 1302, 1301, 1300, 1290, 1291, 1288, 1289, 1294, 1295, 1292, 1293, 1282, 1283, 1280, 1281, 1286, 1287, 1284, 1285, 1336, 1339, 1338, 1340, 1343, 1332, 1320, 1321, 1323, 1325, 1326, 1327, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1492, 1479, 1476, 1481, 1480, 1521, 1535, 1529, 1530, 1518, 1427, 1424, 1428, 1434, 1433, 1438, 1439, 1411, 1415, 1414, 1413, 1412, 1419, 1418, 1416, 1423, 1422, 1456, 1461, 1441, 1440, 1442, 1448, 1450, 1453, 1455, 1616, 1622, 1582, 1591, 1585, 1548, 1547, 1536, 1565, 1564, 1566, 1560, 1563, 1562, 1559, 1558, 1762, 1766, 1765, 1786, 1734, 1738, 1741, 1748, 1709, 1717, 1714, 1715, 1725, 1721, 1837, 1838, 1839, 1833, 1828, 1824, 1825, 1826, 1827, 1823, 1822, 1818, 1801, 1798, 1799, 1796, 1797, 1794, 1795]";
		String[] split = StringUtils.splitByWholeSeparator(str, "], [");
		for (String s : split) {
			s = s.replace("[", "");
			s = s.replace("]", "");

			String[] ss = s.split(",");
			Set<Long> set = Sets.newHashSet();
			for (String sss : ss) {
				set.add(Long.valueOf(sss.trim()));
			}
			
			setList.add(set);
		}
		
		intersectionSet(setList);
	}
}
